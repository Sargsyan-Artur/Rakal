/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface IPaths {
    readonly '/api/v1/admin/merchants/{merchantId}': {
        readonly get: IOperations['getMerchant_1'];
        readonly put: IOperations['updateMerchant'];
    };
    readonly '/api/v1/admin/merchants': {
        readonly get: IOperations['getMerchants_1'];
        readonly post: IOperations['createMerchant'];
    };
    readonly '/api/v1/merchants': {
        readonly get: IOperations['getMerchants'];
    };
    readonly '/api/v1/merchants/{merchantId}': {
        readonly get: IOperations['getMerchant'];
    };
    readonly '/api/v1/merchants/{merchantId}/children': {
        readonly get: IOperations['getChildren'];
    };
    readonly '/api/v1/admin/merchants/{merchantId}/children': {
        readonly get: IOperations['getChildren_1'];
    };
}

export interface components {
    readonly schemas: {
        readonly MerchantAdminDTO: {
            readonly id?: string;
            readonly merchantId?: number;
            readonly name: string;
            readonly phoneNumber?: number;
            readonly email?: string;
            readonly address?: string;
            readonly city?: string;
            readonly zipCode?: number;
            readonly isArchived?: boolean;
            readonly children?: readonly components['schemas']['MerchantDTO'][];
            readonly state?: components['schemas']['StateDTO'];
        };
        readonly MerchantDTO: {
            readonly id?: string;
            readonly merchantId?: number;
            readonly name: string;
            readonly phoneNumber?: number;
            readonly email?: string;
            readonly address?: string;
            readonly city?: string;
            readonly zipCode?: number;
            readonly isArchived?: boolean;
            readonly children?: readonly components['schemas']['MerchantDTO'][];
            readonly state?: string;
        };
        readonly StateDTO: {
            readonly abbreviation?: string;
            readonly name?: string;
        };
        readonly PageMerchantDTO: {
            readonly totalElements?: number;
            readonly totalPages?: number;
            readonly size?: number;
            readonly content?: readonly components['schemas']['MerchantDTO'][];
            readonly number?: number;
            readonly sort?: components['schemas']['Sort'];
            readonly first?: boolean;
            readonly last?: boolean;
            readonly numberOfElements?: number;
            readonly pageable?: components['schemas']['PageableObject'];
            readonly empty?: boolean;
        };
        readonly PageableObject: {
            readonly offset?: number;
            readonly sort?: components['schemas']['Sort'];
            readonly paged?: boolean;
            readonly unpaged?: boolean;
            readonly pageNumber?: number;
            readonly pageSize?: number;
        };
        readonly Sort: {
            readonly empty?: boolean;
            readonly unsorted?: boolean;
            readonly sorted?: boolean;
        };
        readonly PageMerchantAdminDTO: {
            readonly totalElements?: number;
            readonly totalPages?: number;
            readonly size?: number;
            readonly content?: readonly components['schemas']['MerchantAdminDTO'][];
            readonly number?: number;
            readonly sort?: components['schemas']['Sort'];
            readonly first?: boolean;
            readonly last?: boolean;
            readonly numberOfElements?: number;
            readonly pageable?: components['schemas']['PageableObject'];
            readonly empty?: boolean;
        };
    };
}

export interface IOperations {
    readonly getMerchant_1: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
            readonly query: {
                /** flag used to get merchants with children or not. */
                readonly includeChildren?: boolean;
            };
        };
        readonly responses: {
            /** Found the merchant */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['MerchantDTO'];
                };
            };
            /** Merchant with id %s not found! */
            readonly 404: unknown;
        };
    };
    readonly updateMerchant: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
        };
        readonly responses: {
            /** Updated */
            readonly 204: never;
            /** Archived merchant can't be updated! */
            readonly 400: unknown;
            /** Merchant with id %s not found! */
            readonly 404: unknown;
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['MerchantAdminDTO'];
            };
        };
    };
    readonly getMerchants_1: {
        readonly parameters: {
            readonly query: {
                /** flag used to get archived merchants or not, if absent returned all. */
                readonly isArchived?: boolean;
                /** Zero-based page index (0..N) */
                readonly page?: number;
                /** The size of the page to be returned */
                readonly size?: number;
                /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                readonly sort?: readonly string[];
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly '*/*': components['schemas']['PageMerchantAdminDTO'];
                };
            };
        };
    };
    readonly createMerchant: {
        readonly responses: {
            /** Created */
            readonly 201: {
                readonly content: {
                    readonly 'application/json': components['schemas']['MerchantDTO'];
                };
            };
            /** Constraint Violation! */
            readonly 400: unknown;
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['MerchantAdminDTO'];
            };
        };
    };
    readonly getMerchants: {
        readonly parameters: {
            readonly query: {
                /** flag used to get archived merchants or not, if absent returned all. */
                readonly isArchived?: boolean;
                /** Zero-based page index (0..N) */
                readonly page?: number;
                /** The size of the page to be returned */
                readonly size?: number;
                /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                readonly sort?: readonly string[];
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly '*/*': components['schemas']['PageMerchantDTO'];
                };
            };
        };
    };
    readonly getMerchant: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
            readonly query: {
                /** flag used to get merchants with children or not. */
                readonly includeChildren?: boolean;
            };
        };
        readonly responses: {
            /** Found the merchant */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['MerchantDTO'];
                };
            };
            /** Merchant with id %s not found! */
            readonly 404: unknown;
        };
    };
    readonly getChildren: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
            readonly query: {
                /** flag used to get merchants with children or not. */
                readonly 'include-children'?: boolean;
                /** Zero-based page index (0..N) */
                readonly page?: number;
                /** The size of the page to be returned */
                readonly size?: number;
                /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                readonly sort?: readonly string[];
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly '*/*': components['schemas']['PageMerchantDTO'];
                };
            };
        };
    };
    readonly getChildren_1: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
            readonly query: {
                /** flag used to get merchants with children or not. */
                readonly 'include-children'?: boolean;
                /** Zero-based page index (0..N) */
                readonly page?: number;
                /** The size of the page to be returned */
                readonly size?: number;
                /** Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                readonly sort?: readonly string[];
            };
        };
        readonly responses: {
            /** OK */
            readonly 200: {
                readonly content: {
                    readonly '*/*': components['schemas']['PageMerchantAdminDTO'];
                };
            };
        };
    };
}

export interface external {}
