/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface IPaths {
    readonly '/catalogs/{merchantId}': {
        readonly get: IOperations['findAll'];
        readonly post: IOperations['addCategories'];
    };
    readonly '/catalogs/default': {
        readonly get: IOperations['findAllDefault'];
    };
    readonly '/catalogs/{merchantId}/category/{categoryId}': {
        readonly delete: IOperations['removeCategory'];
    };
}

export interface components {
    readonly schemas: {
        /** Represents Catalog Models parameters for create operation. */
        readonly CatalogCreateModel: {
            /** Name of the category */
            readonly name: string;
            /** Allows to attach newly create category to the specified parent */
            readonly parentId?: string | null;
            /** Allows to create a set of nested categories in one request.Doesn't delete or update other categories. */
            readonly children?: readonly components['schemas']['CatalogCreateModel'][] | null;
        };
        readonly AbstractThrowableProblem: {
            readonly cause?: components['schemas']['ThrowableProblem'];
            readonly stackTrace?: readonly {
                readonly classLoaderName?: string;
                readonly moduleName?: string;
                readonly moduleVersion?: string;
                readonly methodName?: string;
                readonly fileName?: string;
                readonly lineNumber?: number;
                readonly className?: string;
                readonly nativeMethod?: boolean;
            }[];
            readonly type?: string;
            readonly title?: string;
            readonly status?: components['schemas']['StatusType'];
            readonly detail?: string;
            readonly instance?: string;
            readonly parameters?: { readonly [key: string]: { readonly [key: string]: unknown } };
            readonly message?: string;
            readonly suppressed?: readonly {
                readonly cause?: {
                    readonly stackTrace?: readonly {
                        readonly classLoaderName?: string;
                        readonly moduleName?: string;
                        readonly moduleVersion?: string;
                        readonly methodName?: string;
                        readonly fileName?: string;
                        readonly lineNumber?: number;
                        readonly className?: string;
                        readonly nativeMethod?: boolean;
                    }[];
                    readonly message?: string;
                    readonly localizedMessage?: string;
                };
                readonly stackTrace?: readonly {
                    readonly classLoaderName?: string;
                    readonly moduleName?: string;
                    readonly moduleVersion?: string;
                    readonly methodName?: string;
                    readonly fileName?: string;
                    readonly lineNumber?: number;
                    readonly className?: string;
                    readonly nativeMethod?: boolean;
                }[];
                readonly message?: string;
                readonly localizedMessage?: string;
            }[];
            readonly localizedMessage?: string;
        };
        readonly StatusType: {
            readonly reasonPhrase?: string;
            readonly statusCode?: number;
        };
        readonly ThrowableProblem: {
            readonly cause?: components['schemas']['ThrowableProblem'];
            readonly stackTrace?: readonly {
                readonly classLoaderName?: string;
                readonly moduleName?: string;
                readonly moduleVersion?: string;
                readonly methodName?: string;
                readonly fileName?: string;
                readonly lineNumber?: number;
                readonly className?: string;
                readonly nativeMethod?: boolean;
            }[];
            readonly message?: string;
            readonly status?: components['schemas']['StatusType'];
            readonly title?: string;
            readonly detail?: string;
            readonly instance?: string;
            readonly type?: string;
            readonly parameters?: { readonly [key: string]: { readonly [key: string]: unknown } };
            readonly suppressed?: readonly {
                readonly cause?: {
                    readonly stackTrace?: readonly {
                        readonly classLoaderName?: string;
                        readonly moduleName?: string;
                        readonly moduleVersion?: string;
                        readonly methodName?: string;
                        readonly fileName?: string;
                        readonly lineNumber?: number;
                        readonly className?: string;
                        readonly nativeMethod?: boolean;
                    }[];
                    readonly message?: string;
                    readonly localizedMessage?: string;
                };
                readonly stackTrace?: readonly {
                    readonly classLoaderName?: string;
                    readonly moduleName?: string;
                    readonly moduleVersion?: string;
                    readonly methodName?: string;
                    readonly fileName?: string;
                    readonly lineNumber?: number;
                    readonly className?: string;
                    readonly nativeMethod?: boolean;
                }[];
                readonly message?: string;
                readonly localizedMessage?: string;
            }[];
            readonly localizedMessage?: string;
        };
        /** Represents persisted Catalog Item. */
        readonly CatalogModel: {
            /** Unique identifier of the catalog item */
            readonly id?: string;
            /** Name of the catalog item */
            readonly name: string;
            /** Specifies the parent item in catalog hierarchy. */
            readonly parentId?: string | null;
            /** Describes level of catalog for easier navigation */
            readonly level?: number;
            /** List of nested items */
            readonly children?: readonly components['schemas']['CatalogModel'][] | null;
        };
        /** For query responses of requests supporting paging via limit and page. */
        readonly ResourcePagedResponseCatalogModel: {
            /** The page supplied by the client or the server default. */
            readonly page?: number;
            /** Shows how many items the current page can contains. */
            readonly limit?: number;
            /** The actual number of results returned in results. */
            readonly count?: number;
            /** The total number of results matching the query. */
            readonly total?: number;
            /** List of results */
            readonly results?: readonly components['schemas']['CatalogModel'][];
            /** Generated link to the previous page. If the current page is the first - contains 'null' */
            readonly prevPage?: string | null;
            /** Generated link to the next page. If the current page is the last one - contains 'null' */
            readonly nextPage?: string | null;
        };
    };
}

export interface IOperations {
    readonly findAll: {
        readonly parameters: {
            readonly query?: {
                // fixed manually
                /** The page into the results matching the query can be set using the page query parameter. The default value is 0, indicating that no results should be skipped. */
                readonly page?: number;
                /** The maximum number of results to return from a query. Allowed is a value between 1 and 200. The default limit is 20 */
                readonly limit?: number;
            };
            readonly path: {
                /** Allows to filter categories that belong to the specified Merchant */
                readonly merchantId: string;
            };
        };
        readonly responses: {
            /** Returns catalog for the specified merchant */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResourcePagedResponseCatalogModel'];
                };
            };
            /** Specified division has invalid format */
            readonly 400: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** User is not authenticated */
            readonly 401: unknown;
            /** User doesn't have enough permissions */
            readonly 403: unknown;
            /** If the specified division is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** Internal error occurred */
            readonly 500: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
    };
    readonly addCategories: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
            };
        };
        readonly responses: {
            /** Indicates that resource was successfully created */
            readonly 201: {
                readonly content: {
                    readonly 'application/json': readonly components['schemas']['CatalogModel'][];
                };
            };
            /** Incorrect values were specified or not all required fields were set */
            readonly 400: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** User is not authenticated */
            readonly 401: unknown;
            /** User doesn't have enough permissions */
            readonly 403: unknown;
            /** Internal error occurred */
            readonly 500: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': readonly components['schemas']['CatalogCreateModel'][];
            };
        };
    };
    readonly findAllDefault: {
        readonly responses: {
            /** Returns a tree of default catalog */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': readonly components['schemas']['CatalogModel'][];
                };
            };
            /** User is not authenticated */
            readonly 401: unknown;
            /** User doesn't have enough permissions */
            readonly 403: unknown;
            /** Internal error occurred */
            readonly 500: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
    };
    readonly removeCategory: {
        readonly parameters: {
            readonly path: {
                readonly merchantId: string;
                readonly categoryId: string;
            };
        };
        readonly responses: {
            /** Indicates that existing resource was successfully deleted */
            readonly 204: never;
            /** Incorrect values were specified or not all required fields were set */
            readonly 400: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** User is not authenticated */
            readonly 401: unknown;
            /** User doesn't have enough permissions */
            readonly 403: unknown;
            /** Requested resource is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** Internal error occurred */
            readonly 500: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
    };
}

export interface external {}
