/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface IPaths {
    readonly '/brands/{id}': {
        readonly get: IOperations['getById'];
        readonly put: IOperations['update'];
        readonly delete: IOperations['delete'];
        readonly patch: IOperations['patch'];
    };
    readonly '/brands': {
        readonly get: IOperations['findAll'];
        readonly post: IOperations['create'];
    };
    readonly '/brands/exists': {
        readonly get: IOperations['exists'];
        readonly post: IOperations['existsUsingPost'];
    };
}

export interface components {
    readonly schemas: {
        /** Represents Brand Models parameters for Brand create or update operation. */
        readonly BrandUpdateModel: {
            /** Brand's name. Unique per Division. */
            readonly name: string;
            /** Determines the order of brands according to their value/importance to merchants. */
            readonly position?: number;
        };
        readonly AbstractThrowableProblem: {
            readonly cause?: components['schemas']['ThrowableProblem'];
            readonly stackTrace?: readonly {
                readonly classLoaderName?: string;
                readonly moduleName?: string;
                readonly moduleVersion?: string;
                readonly methodName?: string;
                readonly fileName?: string;
                readonly lineNumber?: number;
                readonly className?: string;
                readonly nativeMethod?: boolean;
            }[];
            readonly type?: string;
            readonly title?: string;
            readonly status?: components['schemas']['StatusType'];
            readonly detail?: string;
            readonly instance?: string;
            readonly parameters?: { readonly [key: string]: { readonly [key: string]: unknown } };
            readonly message?: string;
            readonly suppressed?: readonly {
                readonly cause?: {
                    readonly stackTrace?: readonly {
                        readonly classLoaderName?: string;
                        readonly moduleName?: string;
                        readonly moduleVersion?: string;
                        readonly methodName?: string;
                        readonly fileName?: string;
                        readonly lineNumber?: number;
                        readonly className?: string;
                        readonly nativeMethod?: boolean;
                    }[];
                    readonly message?: string;
                    readonly localizedMessage?: string;
                };
                readonly stackTrace?: readonly {
                    readonly classLoaderName?: string;
                    readonly moduleName?: string;
                    readonly moduleVersion?: string;
                    readonly methodName?: string;
                    readonly fileName?: string;
                    readonly lineNumber?: number;
                    readonly className?: string;
                    readonly nativeMethod?: boolean;
                }[];
                readonly message?: string;
                readonly localizedMessage?: string;
            }[];
            readonly localizedMessage?: string;
        };
        readonly StatusType: {
            readonly reasonPhrase?: string;
            readonly statusCode?: number;
        };
        readonly ThrowableProblem: {
            readonly cause?: components['schemas']['ThrowableProblem'];
            readonly stackTrace?: readonly {
                readonly classLoaderName?: string;
                readonly moduleName?: string;
                readonly moduleVersion?: string;
                readonly methodName?: string;
                readonly fileName?: string;
                readonly lineNumber?: number;
                readonly className?: string;
                readonly nativeMethod?: boolean;
            }[];
            readonly message?: string;
            readonly status?: components['schemas']['StatusType'];
            readonly title?: string;
            readonly detail?: string;
            readonly instance?: string;
            readonly type?: string;
            readonly parameters?: { readonly [key: string]: { readonly [key: string]: unknown } };
            readonly suppressed?: readonly {
                readonly cause?: {
                    readonly stackTrace?: readonly {
                        readonly classLoaderName?: string;
                        readonly moduleName?: string;
                        readonly moduleVersion?: string;
                        readonly methodName?: string;
                        readonly fileName?: string;
                        readonly lineNumber?: number;
                        readonly className?: string;
                        readonly nativeMethod?: boolean;
                    }[];
                    readonly message?: string;
                    readonly localizedMessage?: string;
                };
                readonly stackTrace?: readonly {
                    readonly classLoaderName?: string;
                    readonly moduleName?: string;
                    readonly moduleVersion?: string;
                    readonly methodName?: string;
                    readonly fileName?: string;
                    readonly lineNumber?: number;
                    readonly className?: string;
                    readonly nativeMethod?: boolean;
                }[];
                readonly message?: string;
                readonly localizedMessage?: string;
            }[];
            readonly localizedMessage?: string;
        };
        /** Represents Brand model. */
        readonly BrandModel: {
            /** An automatic generated universally unique identifier. */
            readonly id?: string;
            /** Brand's name. Unique per division. */
            readonly name: string;
            /** Specifies which Division the Brand belongs to. */
            readonly divisionId: string;
            /** Determines the order of Brands according to their value/importance to Division. */
            readonly position?: number;
        };
        /** Represents Brand Models parameters for Brand create or update operation. */
        readonly BrandCreateModel: {
            /** Brand's name. Unique per Division. */
            readonly name: string;
            /** Specifies which Division the Brand belongs to. */
            readonly divisionId: string;
            /** Determines the order of brands according to their value/importance to merchants. */
            readonly position?: number;
        };
        /** A set of required parameters to check if the name already exists */
        readonly CheckUniqueBrandNameModel: {
            /** Brand's name. Should be unique per Division. */
            readonly name: string;
            /** Specifies which Division the Brand belongs to. */
            readonly divisionId: string;
        };
        /** Represents Brand Models parameters for Brand patch operation. */
        readonly BrandPatchModel: {
            /** Brand's name. Unique per Division. */
            readonly name?: string | null;
            /** Determines the order of brands according to their value/importance to merchants. */
            readonly position?: number | null;
        };
        /** Represents response of PATCH operation. */
        readonly BrandPatchResponseModel: {
            readonly id?: string;
            /** Brand's name. Unique per Division. */
            readonly name?: string;
            /** Determines the order of brands according to their value/importance to merchants. */
            readonly position?: number;
        };
        /** For query responses of requests supporting paging via limit and page. */
        readonly ResourcePagedResponseBrandModel: {
            /** The page supplied by the client or the server default. */
            readonly page?: number;
            /** Shows how many items the current page can contains. */
            readonly limit?: number;
            /** The actual number of results returned in results. */
            readonly count?: number;
            /** The total number of results matching the query. */
            readonly total?: number;
            /** List of results */
            readonly results?: readonly components['schemas']['BrandModel'][];
            /** Generated link to the previous page. If the current page is the first - contains 'null' */
            readonly prevPage?: string | null;
            /** Generated link to the next page. If the current page is the last one - contains 'null' */
            readonly nextPage?: string | null;
        };
    };
}

export interface IOperations {
    readonly getById: {
        readonly parameters: {
            readonly path: {
                readonly id: string;
            };
        };
        readonly responses: {
            /** Requested resource exists and user have enough permission to view it. */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['BrandModel'];
                };
            };
            /** User is not authenticated and anonymous user cannot access this resource. */
            readonly 401: unknown;
            /** User doesn't have permissions to access this resource (even if resource does not exists) */
            readonly 403: unknown;
            /** Requested resource is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
    };
    readonly update: {
        readonly parameters: {
            readonly path: {
                readonly id: string;
            };
        };
        readonly responses: {
            /** Indicates that existing resource was successfully replaced. */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['BrandModel'];
                };
            };
            /** Incorrect values were specified or not all required fields were set. */
            readonly 400: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** User is not authenticated when anonymous user cannot create new resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to create a new resource */
            readonly 403: unknown;
            /** Requested resource is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** When Brand with the same name and Division already exists. */
            readonly 409: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['BrandUpdateModel'];
            };
        };
    };
    readonly delete: {
        readonly parameters: {
            readonly path: {
                readonly id: string;
            };
        };
        readonly responses: {
            /** Indicates that specified resources no longer exists or was not found (not exists). */
            readonly 204: never;
            /** User is not authenticated and anonymous user cannot delete this resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to delete this resource */
            readonly 403: unknown;
        };
    };
    readonly patch: {
        readonly parameters: {
            readonly path: {
                readonly id: string;
            };
        };
        readonly responses: {
            /** Indicates that existing resource was successfully replaced. */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['BrandPatchResponseModel'];
                };
            };
            /** Incorrect values were specified. */
            readonly 400: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** User is not authenticated when anonymous user cannot create new resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to create a new resource */
            readonly 403: unknown;
            /** Requested resource is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** When Brand with the same name and Division already exists. */
            readonly 409: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['BrandPatchModel'];
            };
        };
    };
    readonly findAll: {
        readonly parameters: {
            readonly query: {
                /** The page of the results matching the query can be set using the page query parameter. The default value is 0, indicating that the initial page would be taken. */
                readonly page?: number;
                /** The maximum number of results to return from a query. Allowed is a value between 1 and 200. The default limit is 20 */
                readonly limit?: number;
                /** Allows to filter brands that belong to the specified Division */
                readonly divisionId: string;
            };
        };
        readonly responses: {
            /** Returns list of requested resourced that matches query */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': components['schemas']['ResourcePagedResponseBrandModel'];
                };
            };
            /** Incorrect values were specified for paging of filtering parameters. */
            readonly 400: unknown;
            /** User is not authenticated and anonymous user cannot access this resource. */
            readonly 401: unknown;
            /** User doesn't have enough permissions to access this resource (even if resource does not exists) */
            readonly 403: unknown;
        };
    };
    readonly create: {
        readonly responses: {
            /** Indicates that new resource was successfully created. */
            readonly 201: {
                readonly content: {
                    readonly 'application/json': components['schemas']['BrandModel'];
                };
            };
            /** Incorrect values were specified or not all required fields were set. */
            readonly 400: unknown;
            /** User is not authenticated when anonymous user cannot create new resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to create a new resource */
            readonly 403: unknown;
            /** Division for which need to create a new Brand is not found. */
            readonly 404: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
            /** When Brand with the same name and Division already exists. */
            readonly 409: {
                readonly content: {
                    readonly 'application/json': components['schemas']['AbstractThrowableProblem'];
                };
            };
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['BrandCreateModel'];
            };
        };
    };
    readonly exists: {
        readonly parameters: {
            readonly query: {
                readonly name: string;
                readonly divisionId: string;
            };
        };
        readonly responses: {
            /** Indicates that resource is exists for the specified parameters. */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': boolean;
                };
            };
            /** Incorrect values were specified. */
            readonly 400: unknown;
            /** User is not authenticated when anonymous user cannot create new resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to get resource for the specified division. */
            readonly 403: unknown;
        };
    };
    readonly existsUsingPost: {
        readonly responses: {
            /** Indicates that resource is exists for the specified parameters. */
            readonly 200: {
                readonly content: {
                    readonly 'application/json': boolean;
                };
            };
            /** Incorrect values were specified. */
            readonly 400: unknown;
            /** User is not authenticated when anonymous user cannot create new resource */
            readonly 401: unknown;
            /** User doesn't have enough permissions to get resource for the specified division. */
            readonly 403: unknown;
        };
        readonly requestBody: {
            readonly content: {
                readonly 'application/json': components['schemas']['CheckUniqueBrandNameModel'];
            };
        };
    };
}

export interface external {}
